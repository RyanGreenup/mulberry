#+TITLE: Mulberry Components
#+OPTIONS: H:6

* Mulberry Components
** Usage
*** Walkthrough
1. Create a Solid JS Project

   #+begin_src sh
   name="PROJECT_NAME"
   npm init solid@latest -- -p "${name}" --solidstart --ts -t basic
   cd "${name}"
   bun install
   git init
   git add -A
   git commit -m 'Initial Commit'
   #+end_src

2. Install Panda as per the [[https://panda-css.com/docs/installation/storybook][docs]] and add an additional clean script to the =package.json=

   #+begin_src json
  "scripts": {
    "prepare": "panda codegen",
    "prepare-clean": "panda codegen --clean"
  },

   #+end_src

3. Set the jsx framework like so and run =npm run prepare-clean=:

   #+begin_src typescript
export default defineConfig({
  // Whether to use css reset
  preflight: true,

  jsxFramework: "solid",

  ...
  ...
   #+end_src

4. Add this submodule

   #+begin_src sh
cd src
git submodule add https://github.com/ryangreenup/mulberry
   #+end_src

5. Add the submodule as a workspace package and install the dependencies

   1. In =package.json=
      #+begin_src diff
diff --git a/package.json b/package.json
index b887ee8..5152d1b 100644
--- a/package.json
+++ b/package.json
@@ -1,11 +1,14 @@
 {
   "name": "mulberry-storybook",
   "version": "0.0.0",
   "private": true,
   "scripts": {
     "storybook": "storybook dev -p 6006",
     "build-storybook": "storybook build"
   },
+  "workspaces": [
+    "./src/mulberry"
+  ],
   "devDependencies": {
     "@chromatic-com/storybook": "^4.1.1",
     "@pandacss/dev": "^1.2.0",
      #+end_src

   2. Install the package from root:

      #+begin_src sh
# If the submodule is a workspace package, the dependencies should automatically be added
bun install
      #+end_src

6. Symlink the styled-system directory

   #+begin_src sh
ln -sr styled-system src/mulberry/styled-system
   #+end_src

7. Add the Preset to the =panda.config.ts=

   #+begin_src typescript
import { defineConfig } from "@pandacss/dev";
import pandaPreset from "@pandacss/preset-panda";
import { DaisyPreset } from "./src/mulberry/presets/daisy/daisy";
import layoutPreset from "./src/mulberry/presets/layout/layout";

export default defineConfig({
  // Whether to use css reset
  preflight: true,

  presets: [pandaPreset, DaisyPreset, layoutPreset],

  // Enable JSX generation
  jsxFramework: "solid",

  // Where to look for your css declarations
  include: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./pages/**/*.{js,jsx,ts,tsx}",
    "./stories/**/*.{js,jsx,ts,tsx}",
  ],

  // Files to exclude
  exclude: [],

  // Useful for theme customization
  theme: {
    extend: {},
  },

  outExtension: "js",
  // The output directory for your css system
  outdir: "styled-system",
});

   #+end_src


*** Notes

Instead of symlinking I was going to do this:


1. Set up a workspace package for the styled system

   1. Create the =package.json= under =./styled-system=

      #+begin_src sh
   bun run prepare-clean
   # No trailing slash! Otherwise there's a slash in the name
   npx panda emit-pkg  --outdir styled-system
   bun update
      #+end_src

   2. Change the name to have a scoped parent like =@foo/styled-system=:

      #+begin_src json
{
  "name": "@mulberry/mulberry-styled-system",
  "description": "This package is auto-generated by Panda CSS",
      #+end_src

      This is required due to Vite's dependency pre-bundling behavior. During the dependency scanning phase, Vite treats bare imports (like
   =styled-system/jsx=) as external npm packages that need pre-bundling, but scoped imports (@foo/styled-system/jsx) are handled differently.


   3. Add the workspace package to =./package.json=

      #+begin_src json
  "workspaces": [
    "./src/mulberry",
    "styled-system"
  ],
      #+end_src

   4. Update

      #+begin_src sh
bun update
      #+end_src


However I elected against because:

1. It's more setup
2. Updating the name in =styled-system/package.json= got confusing
   1. I wanted to leave it as =styled-system= but Vite won't resolve that, it must be in a namespace
   2. Setting up a workspace package called =@mulberry/styled-system= in a third party's repo feels incorrect.
3. =panda codegen --clean= will wipe the =package.json= which could be confusing (and annoying).
   1. Setting up a nested workspace directory is more work on the consuming app side. This is built for me to quickly grab components I'm already familiar with to build dashboards etc.
4. It felt more correct to have the component library own the =styled-system= if packaged as a workspace package
   1. That requires maintaining two =styled-system= directories though!

One obvious benefit is that =styled-system= can be imported without a relative import, but it's not too hard to update relative links.
